{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/components/blogPost.js","webpack:///./src/pages/blog.js"],"names":["props","className","count","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","to","fields","slug","title","padding","id","margin","marginTop","marginBottom","quote","description","backgroundColor","height","BlogIndex","location","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","postCounter","path","keywords","map","key","query","render"],"mappings":"2FAAA,qCAGe,aAAAA,GAAK,OAClB,6BACEC,UAAS,cAAeD,EAAME,MAAQ,GAAM,GAApB,mBAAf,IACPF,EAAMG,UADC,KAELH,EAAMI,KAAKC,YAAYC,UAAvB,yBACJC,MACEP,EAAMI,KAAKC,YAAYC,WAAa,CAClCE,gBAAgB,OACdR,EAAMI,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,IAD1C,MAMnB,kBAAC,OAAD,CAAMC,GAAIZ,EAAMI,KAAKS,OAAOC,KAAMb,UAAU,kBAC1C,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,mBACXD,EAAMI,KAAKC,YAAYU,OAASf,EAAMI,KAAKS,OAAOC,W,6HChB9C,G,8BAAA,SAAAd,GAAK,OAChB,6BAASC,UAAU,sCAAsCM,MAAO,CAAES,QAAS,IACvE,yBAAKf,UAAU,qBACX,wBAAIgB,GAAG,kBAAkBV,MAAO,CAAEW,OAAQ,IAAOlB,EAAMI,KAAKC,YAAYU,OAASf,EAAMI,KAAKS,OAAOC,MACnG,yBACIb,UAAS,aAAeD,EAAMG,UAArB,KACDH,EAAMI,KAAKC,YAAYC,UAAvB,yBACRC,MACIP,EAAMI,KAAKC,YAAYC,WAAa,CAChCE,gBAAgB,OAAQR,EAAMI,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,IAAhE,IAEfQ,UAAW,OACXC,aAAc,SAItB,yBAAKnB,UAAU,qBACX,wBAAIA,UAAU,mBACTD,EAAMI,KAAKC,YAAYU,OAASf,EAAMI,KAAKS,OAAOC,QAI/D,oCACKd,EAAMI,KAAKC,YAAYgB,OAASrB,EAAMI,KAAKS,OAAOC,MAEvD,2BACKd,EAAMI,KAAKC,YAAYiB,cAGhC,wBACIf,MAAO,CACHgB,gBAAiB,qBACjBC,OAAQ,QCvBlBC,EAAY,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KACbC,EAAYD,EAAKE,KAAKC,aAAaf,MACnCgB,EAAQJ,EAAKK,kBAAkBC,MACjCC,EAAc,EAElB,OACE,kBAAC,IAAD,CAAQnB,MAAOa,EAAWO,KAAK,SAC7B,kBAAC,IAAD,CACEpB,MAAM,OACNqB,SAAU,CAAC,OAAD,iCAGXT,EAAKE,KAAKC,aAAaR,aACtB,4BAAQrB,UAAU,aAChB,wBAAIA,UAAU,mBACX0B,EAAKE,KAAKC,aAAaR,cAI9B,wBACEf,MAAO,CACLgB,gBAAiB,qBACjBC,OAAQ,KAGZ,yBAAKvB,UAAU,aACZ8B,EAAMM,KAAI,YAAe,IAAZjC,EAAW,EAAXA,KAEZ,OADA8B,IAEE,kBAAC,EAAD,CACEI,IAAKlC,EAAKS,OAAOC,KACjBZ,MAAOgC,EACP9B,KAAMA,EACND,UAAS,eA0CR,mBAAAH,GAAK,OAClB,kBAAC,cAAD,CACEuC,MAnCY,aAoCZC,OAAQ,SAAAb,GAAI,OACV,kBAAC,EAAD,eAAWD,SAAU1B,EAAM0B,SAAU1B,OAAK,EAAC2B,KAAMA,GAAU3B,S","file":"component---src-pages-blog-js-6ca98eb1eb5bbb1abb8c.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n        })`,\n      }\n    }\n  >\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\n      <div className=\"post-card-content\">\n        <h2 className=\"post-card-title\">\n          {props.node.frontmatter.title || props.node.fields.slug}\n        </h2>\n      </div>\n    </Link>\n  </article>\n)\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n    <article className=\"post-content page-template no-image\" style={{ padding: 0, }}>\n        <div className=\"post-content-body\">\n            <h3 id=\"heading-level-3\" style={{ margin: 0, }}>{props.node.frontmatter.title || props.node.fields.slug}</h3>\n            <div\n                className={`post-card ${props.postClass\n                    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n                style={\n                    props.node.frontmatter.thumbnail && {\n                        backgroundImage: `url(${props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n                            })`,\n                        marginTop: '2rem',\n                        marginBottom: '2rem',\n                    }\n                }\n            >\n                <div className=\"post-card-content\">\n                    <h2 className=\"post-card-title\">\n                        {props.node.frontmatter.title || props.node.fields.slug}\n                    </h2>\n                </div>\n            </div>\n            <blockquote>\n                {props.node.frontmatter.quote || props.node.fields.slug}\n            </blockquote>\n            <p>\n                {props.node.frontmatter.description}\n            </p>\n        </div>\n        <hr\n            style={{\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                height: 2\n            }}\n        />\n    </article>\n)\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\n// import \"../styles/global.scss\"\nimport \"../styles/normalize.css\"\nimport \"../styles/css/screen.css\"\nimport BlogPost from \"../components/blogPost\"\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle} path=\"/blog\">\n      <SEO\n        title=\"Blog\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      {/* <Bio /> */}\n      {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n          <h2 className=\"page-head-title\">\n            {data.site.siteMetadata.description}\n          </h2>\n        </header>\n      )}\n      <hr\n        style={{\n          backgroundColor: 'rgba(0, 0, 0, 0.5)',\n          height: 2\n        }}\n      />\n      <div className=\"blog-body\">\n        {posts.map(({ node }) => {\n          postCounter++\n          return (\n            <BlogPost\n              key={node.fields.slug}\n              count={postCounter}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <BlogIndex location={props.location} props data={data} {...props} />\n    )}\n  />\n)"],"sourceRoot":""}